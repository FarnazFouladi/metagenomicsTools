rm(list=ls())
setwd("D:\\BigDataScaleFactor")
library("phyloseq")
library("DESeq2")
library("ggplot2")
library("Kendall")
################################################################################################################################################
################################################################################################################################################
"logNormalize" <- function(myIn)
{
a2<-t(myIn)
avgPerSam<-sum(apply(a2,1,sum)) / nrow(a2)

for(i in 1:nrow(a2))
{
        totSam<-sum(a2[i,1:ncol(a2)])
        a2[i,1:ncol(a2)]<-log10(((a2[i,1:ncol(a2)]/totSam)*avgPerSam)+1)
}
return(t(a2))
}
################################################################################################################################################
"normalize" <- function(myIn)
{
a2<-t(myIn)

for(i in 1:nrow(a2))
{
        totSam<-sum(a2[i,1:ncol(a2)])
        a2[i,1:ncol(a2)]<-a2[i,1:ncol(a2)]/totSam
}
return(t(a2))
}

################################################################################################################################################
"getPCoA" <- function(phyloObject,method, numAxis)
{
myOut<-list()
if(method == "wUniFrac"){iDist <- phyloseq::distance(phyloObject, method = "unifrac", weighted = TRUE)}else{
iDist <- phyloseq::distance(phyloObject, method = method)}
iMDS <- ordinate(phyloObject, "PCoA", distance = iDist)
explained<-c(paste("PCoA 1  ", round(100 *iMDS$values[1,2],2), "%", sep="") , paste("PCoA 2  ", round(100 *iMDS$values[2,2],2), "%", sep=""))
p <- plot_ordination(phyloObject, iMDS, color = NULL, shape = NULL, justDF=T, axes=c(1:numAxis))
myOut[[1]]<-p
myOut[[2]]<-explained
return(myOut)
}
################################################################################################################################################
################################################################################################################################################

myBiom <- import_biom("ttuLyte_70_mergedReads_PL_raw_counts.biom", parseFunction = parse_taxonomy_default)
map <- import_qiime_sample_data("mapping.txt")
ttuLyte<-merge_phyloseq(myBiom, map)



########################
ttuLyte_LN<-ttuLyte
otu_table(ttuLyte_LN)<-otu_table(logNormalize(otu_table(ttuLyte)), taxa_are_rows=T)
samSums<-log10(sample_sums(ttuLyte))

ttuLyte_RelativeAbundnace<-ttuLyte
otu_table(ttuLyte_LN)<-otu_table(normalize(otu_table(ttuLyte)), taxa_are_rows=T)

########################
#diagdds = phyloseq_to_deseq2(ttuLyte, ~1)
#diagdds = estimateSizeFactors(diagdds)
#diagdds = estimateDispersions(diagdds, fitType='local')
#diagvst = getVarianceStabilizedData(diagdds)
#diagvst<-diagvst + abs( min(diagvst))
#ttuLyte_VSD<-ttuLyte
#otu_table(ttuLyte_VSD)<-otu_table(diagvst, taxa_are_rows=T)

######################## Bray-Curtis  PCoA using log Norm
numAxis<-2 #this returns the first two axes for plotting, change to how many axes you need
bc_LogNorm<-getPCoA(ttuLyte_LN, method = "bray", numAxis)
#plot PCoA colored by saccharin and point size is log10 sample size
bc_LogNorm[[1]]<-cbind(bc_LogNorm[[1]], samSums)
bc_LogNorm_plot<- ggplot(bc_LogNorm[[1]], aes(Axis.1, Axis.2)) + geom_point(aes(colour=saccharin, size = samSums)) + theme(axis.title.x = element_blank()) + ylab(bc_LogNorm[[2]][2])  + xlab(bc_LogNorm[[2]][1]) + theme_bw()
str(bc_LogNorm)
plot( bc_LogNorm[[1]]$Axis.1, bc_LogNorm[[1]]$samSums ) 
plot(  bc_LogNorm[[1]]$samSums , bc_LogNorm[[1]]$Axis.1)
plot( sample_sums(ttuLyte), bc_LogNorm[[1]]$Axis.1)
Kendall(  bc_LogNorm[[1]]$Axis.1 , bc_LogNorm[[1]]$samSums ) 

###############################################

numAxis<-2 #this returns the first two axes for plotting, change to how many axes you need
bc_RA<-getPCoA(ttuLyte_RelativeAbundnace, method = "bray", numAxis)
#plot PCoA colored by saccharin and point size is log10 sample size
bc_RA[[1]]<-cbind(bc_RA[[1]], samSums)
str(bc_RA)
plot(bc_RA[[1]]$samSums , bc_RA[[1]]$Axis.1 ) 
Kendall(bc_RA[[1]]$samSums , bc_RA[[1]]$Axis.1 ) 

#####################################################




#######################  Bray-Cutris PCoA not log normalized ###############
numAxis<-2 #this returns the first two axes for plotting, change to how many axes you need
bc_relativeAbundance<-getPCoA(ttuLyte, method = "bray", numAxis)


######################## Bray-Curtis  PCoA using VSD
numAxis<-2 #this returns the first two axes for plotting, change to how many axes you need
bc_VSD<-getPCoA(ttuLyte_VSD, method = "bray", numAxis)
#plot PCoA colored by saccharin and point size is log10 sample size
bc_VSD[[1]]<-cbind(bc_VSD[[1]], samSums)
bc_VSD_plot<- ggplot(bc_VSD[[1]], aes(Axis.1, Axis.2)) + geom_point(aes(colour=saccharin, , size = samSums)) + theme(axis.title.x = element_blank()) + ylab(bc_VSD[[2]][2])  + xlab(bc_VSD[[2]][1]) + theme_bw()

########################
if(!unique(as.character(bc_LogNorm[[1]]$X.SampleID) == names(samSums))){stop("samples not in the same order")}
plot(samSums, bc_LogNorm[[1]]$Axis.1, pch=19, col="black", cex=3, xlab="", ylab="", bty='n')
logNorm_LM<-summary(lm(bc_LogNorm[[1]]$Axis.1 ~ samSums))
mtext("log10 Number of Reads", 1, line=2.5, cex=1.4) 
mtext("PCoA-1 value", 2, line=2.5, cex=1.4) 

########################
if(!unique(as.character(bc_VSD[[1]]$X.SampleID) == names(samSums))){stop("samples not in the same order")}
plot(samSums, bc_VSD[[1]]$Axis.1, pch=19, col="black", cex=3, xlab="", ylab="", bty='n')
VSD_LM<-summary(lm(bc_VSD[[1]]$Axis.1 ~ samSums))
mtext("log10 Number of Reads", 1, line=2.5, cex=1.4) 
mtext("PCoA-1 value", 2, line=2.5, cex=1.4) 

######################## PCA on Log Norm 
samSums<-log10(sample_sums(ttuLyte))
tty_otus<-access(ttuLyte_LN, "otu_table")
pcaDat<-prcomp(t(tty_otus)) #this will pefrom PCA
if(!unique(names(pcaDat$x[,1]) == names(samSums))){stop("samples not in the same order")}
plot(samSums, pcaDat$x[,1], pch=19, col="black", cex=3, xlab="", ylab="", bty='n')
pca_LN_LM<-summary(lm(pcaDat$x[,1] ~ samSums))
mtext("log10 Number of Reads", 1, line=2.5, cex=1.4) 
mtext("PCA-1 value", 2, line=2.5, cex=1.4) 

######################## PCA on VSD 
tty_otus<-access(ttuLyte_VSD, "otu_table")
samSums<-log10(sample_sums(ttuLyte))
pcaDat<-prcomp(t(tty_otus)) #this will pefrom PCA
if(!unique(names(pcaDat$x[,1]) == names(samSums))){stop("samples not in the same order")}
plot(samSums, pcaDat$x[,1], pch=19, col="black", cex=3, xlab="", ylab="", bty='n')
pca_VSD_LM<-summary(lm(pcaDat$x[,1] ~ samSums))
mtext("log10 Number of Reads", 1, line=2.5, cex=1.4) 
mtext("PCA-1 value", 2, line=2.5, cex=1.4) 

