rm(list=ls())
library("gap")

numSimulations <- 10000
numReadsPerSimulation <- 1000000

pValues <- vector();
sumNumFound <- vector();
expectedMeans <- vector()

for( i in 1:numSimulations)
{
	rateOfGeneExperession <- runif(1) / 100;  # no gene is more than 1%
	expectedMean <- rateOfGeneExperession  * numReadsPerSimulation 
	
	var1 = 10 * expectedMean
	var2 = 5 * expectedMean
	
	numFound1 <- rnorm( 1,mean=expectedMean  , sd = sqrt(var1))
	numFound2 <- rnorm( 1,mean=expectedMean  , sd = sqrt(var2))
	
	if( numFound1 < 0 ) 
		numFound1 =0;
		
	if( numFound2 < 0 ) 
		numFound2 =0;
		
	numFound1= round(numFound1)
	numFound2= round(numFound2)
	
	expectedMeans[i] <- expectedMean
	sumNumFound[i] <- numFound1 + numFound2;

	r1 = numFound1* numFound1 / (var1 - numFound1) 
	p1 = numFound1 / var1
	
	r2 = numFound2* numFound2/ (var2 - numFound2) 
	p2 = numFound2/ var2
	
	r1 = round(r1)
	r2 = round(r2)
	
	pAB<- function(a){ dnbinom(a,r1,p1) * dnbinom(a,r2,p2 ) }
	
	sumP <- function(a) 
	{
		peak = (numFound1 + numFound2) / 2;
		
		if( a <= peak) 
		{
			return ( sum( pAB(0:a)))
		}
		else
		{
			return ( sum( pAB(a:numFound1+numFound2)))
		}
	} 
	
	pValues[i] <- ( sumP(numFound1) + sumP(numFound2) ) / sum( pAB(0:numFound1+numFound2) );
	
	par( mfrow = c( 2, 1 ) )

	titleStr <- paste("Number of simulated genes = ",i,sep="")

	# load package gap first
	qqunif(pValues,logscale=FALSE,)
	hist(pValues,plot=TRUE,breaks=10)
	Sys.sleep(.1)
}