rm(list=ls())

# data from http://www.highstat.com/Book2/ZuurDataMixedModelling.zip

setwd("C:\\books\\zuurData");

myT <- read.table("ParasiteCod.txt", header=TRUE, sep="\t")

myT <- myT[!is.na(myT$Intensity) & ! is.na(myT$Weight) ,]

par(mfrow=c(3,2))
plot( myT$Weight, myT$Intensity)

sum( myT$Intensity == 0) / nrow(myT)

# fit with linear model
M0 <- lm( myT$Intensity ~ myT$Weight)
xRange<- seq(from = 0,to = 10000, by = 250)
linearMeans <- coef(M0)[1] + coef(M0)[2] * xRange
library("Hmisc")
meanR <- mean(residuals(M0))
standardError = sqrt(sum( (residuals(M0)-meanR)^2 / ( length(residuals(M0)) - 2 )))
plot(myT$Weight, myT$Intensity, main = paste("linear ; AIC = ", format( AIC(M0),digits=5) 
				," p = " , format(anova(M0)$"Pr(>F)"[1],digits=5),sep="" ))
lines( xRange, linearMeans, col="red")
errbar(xRange, linearMeans , linearMeans + standardError , linearMeans - standardError ,add=TRUE, col="RED")


# try the poisson
M1 <- glm(myT$Intensity ~ myT$Weight, family = poisson, data = myT)
library(lmtest)
pValue = lrtest(M1)$"Pr(>Chisq)"[2]
title = paste( "Poisson AIC=", format(AIC(M1),digits=5), " p = ", format(pValue,digits=5),sep="")
plot(myT$Weight, myT$Intensity,main=title)
modelMeans <- exp( coef(M1)[1] + coef(M1)[2]* xRange)
lines(xRange, modelMeans,col="RED" )
# variance equals the means
errbar(xRange, modelMeans, modelMeans + sqrt(modelMeans), modelMeans - sqrt(modelMeans),add=TRUE,col="RED")

# try zero inflated Poisson
library(pscl)
M2 <- zeroinfl( myT$Intensity ~ myT$Weight |myT$Weight , data= myT, link = "logit") 
pValue = lrtest(M2)$"Pr(>Chisq)"[2]
title = paste( "Poisson ZI AIC=", format(AIC(M2),digits=5), " p = ", format(pValue,digits=5),sep="")
plot(myT$Weight, myT$Intensity,main=title)

mui = exp(coef(M2)[1] + coef(M2)[2]* xRange)
pi_i  = 1 / (1 + exp(-(coef(M2)[3] + coef(M2)[4] * xRange )))
modelMeans <- mui * (1 - pi_i)

#alternatively from the Zuur book.. (if xRange is set to myT$weight)
EstPar <- coef(M2,model = "zero")
Z <- model.matrix(M2,model = "zero")
g <- Z %*% EstPar
p <- exp(g) / (1 + exp(g))

EstPar2 <- coef(M2, model = "count")
X <- model.matrix(M2, model = "count")
g <- X %*% EstPar2
mu1 <- exp(g)
mu <- (1 - p) * mu1

# or with much less effort
fitted(M2)
# or
predict(M2)

lines(xRange, modelMeans,col="RED" )
modelVar = (1-pi_i) * (mui + pi_i * mui^2)
errbar(xRange, modelMeans, modelMeans + sqrt(modelVar), modelMeans - sqrt(modelVar),add=TRUE,col="RED")

# check the pearson residuals (if xRange is set to myT$weight)
#EP <- (myT$Intensity - mu) / sqrt(modelVar)
#plot( EP, residuals(M2,type="pearson") )
#sum (abs(EP -  residuals(M2,type="pearson")) > 0.000001 )


# try negative bionomial
M3 <- glm.nb(myT$Intensity ~ myT$Weight,data = myT) 
model3Means <- exp( coef(M3)[1] + coef(M3)[2]* xRange)
pValue = lrtest(M3)$"Pr(>Chisq)"[2]
title = paste( "Negative Binomial AIC=", format(AIC(M3),digits=5), " p = ", format(pValue,digits=5),sep="")
plot(myT$Weight, myT$Intensity,main=title)
lines(xRange, model3Means,col="RED" )
vars = model3Means  + model3Means^2 /  M3$theta
errbar(xRange, model3Means, model3Means + sqrt(vars), model3Means - sqrt(vars),add=TRUE, errbar.col="RED")

# check the pearson residuals (if xRange is set to myT$weight)
#EP <- (myT$Intensity - model3Means) / sqrt(vars)
#plot( EP, residuals(M3,type="pearson") )
#sum (abs(EP -  residuals(M3,type="pearson")) > 0.000001 )

# finally zero inflated negative binomial
library(pscl)
M4 <- zeroinfl( myT$Intensity ~ myT$Weight |myT$Weight , data= myT, dist="negbin", link = "logit") 
pValue = lrtest(M4)$"Pr(>Chisq)"[2]
title = paste( "Neb. Binomial ZI AIC=", format(AIC(M4),digits=5), " p = ", format(pValue,digits=5),sep="")
plot(myT$Weight, myT$Intensity,main=title)

mui = exp(coef(M4)[1] + coef(M4)[2]* xRange)
pi_i  = 1 / (1 + exp(-(coef(M4)[3] + coef(M4)[4] * xRange )))
modelMeans <- mui * (1 - pi_i)

# or with much less effort if xRange is set to myT$Weight
fitted(M4)
# or
predict(M4)
# should be zero
#sum( abs(fitted(M4) - modelMeans) > 0.00001) 

lines(xRange, modelMeans,col="RED" )
modelVar = (1-pi_i) * (mui + mui^2 / M4$theta) + mui^2 * (pi_i + pi_i^2)
errbar(xRange, modelMeans, modelMeans + sqrt(modelVar), modelMeans - sqrt(modelVar),add=TRUE,errbar.col="RED")

# check the pearson residuals (if xRange is set to myT$weight)
#EP <- (myT$Intensity - modelMeans) / sqrt(modelVar)

# a lot of round off error and one point that is off the line, but close enough!
#sum (abs(EP -  residuals(M4,type="pearson")) > 0.1 )

# fit with 4th order linear model
#xRange = myT$Weight
#M5 <- lm( myT$Intensity ~ poly(myT$Weight,4))
#linearMeans <- fitted(M5)
#meanR <- mean(residuals(M5))
#standardError = sqrt(sum( (residuals(M5)-meanR)^2 / ( length(residuals(M5)) - 5 )))
#plot(myT$Weight, myT$Intensity, main = paste("polynomial linear ; AIC = ", format( AIC(M5),digits=5) 
				," p = " , format(anova(M0)$"Pr(>F)"[1],digits=5),sep="" ))
#lines( xRange, linearMeans, col="red")
#errbar(xRange, linearMeans , linearMeans + standardError , linearMeans - standardError ,add=TRUE, col="RED")

par(mfrow=(c(3,2)))
plot( fitted(M0), residuals(M0, type="pearson"), main="linear")
plot( fitted(M1), residuals(M1, type="pearson"), main = "Poisson")
plot( fitted(M2), residuals(M2, type="pearson"), main = "Poisson - zero adjusted")
plot( fitted(M3), residuals(M3, type="pearson"), main = "Neg. bin")
plot( fitted(M4), residuals(M4, type="pearson"), main = "Neg. bin zero adjusted")


par(mfrow=(c(3,2)))
plot( myT$Intensity, residuals(M0, type="pearson"), main="linear")
plot(myT$Intensity, residuals(M1, type="pearson"), main = "Poisson")
plot(myT$Intensity, residuals(M2, type="pearson"), main = "Poisson - zero adjusted")
plot( myT$Intensity, residuals(M3, type="pearson"), main = "Neg. bin")
plot( myT$Intensity, residuals(M4, type="pearson"), main = "Neg. bin zero adjusted")


