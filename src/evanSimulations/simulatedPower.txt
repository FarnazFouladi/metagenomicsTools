rm(list=ls())

numSimulations <- 1

# there are typically around 70-75 families that are called by the RDP
# classification scheme in diverse sample types (such as gut or oral 
# microbiota) in large datasets (Fodor lab, unpublished data)
numTaxa <- 75

numCases <- 400
numControls <- 800

# here we assume that 20% of the bugs are different between
# case and control and cesarian and have an interaction term
# we don't know the true # that will be different in our large cohort
# but this doesn't seem entirely out of line with our preliminary data
# which showed several a number of significant taxa despite a very small sample size.
fractionTruePositives <- 0.20

# for simplicity we only have one effect size for all effects
# obviously, this can be assigned individually if there was 
# interested in expanding the complexity of the power simulation
effectSize = .4

# Cesarian rate in 2014 according to http://www.childbirthconnection.org/article.asp?ck=10554
fractionCesarian <- 0.329

casesAreCesarian <- rnorm(numCases) <= fractionCesarian 
controlsAreCesarian <- rnorm(numControls) <= fractionCesarian 

for( i in 1:numSimulations)
{
	pValuesCaseControl <- vector()
	pValuesCesarian <- vector()
	pValuesInteraction <- vector()
	isCaseControlPositive <- rnorm(numTaxa) <= fractionTruePositives
	isCesarianPositive <- rnorm(numTaxa) <= fractionTruePositives
	
	for( j in 1:numTaxa)
	{
		# a major limitation of this simulation is the assumption of normality
		# more complex (realistic) powers simulations would more closely 
		# match the actual distribution of count data from a real metagenomic dataset
		controlVals <- vector()
		
		for ( k in 1:numControls ) 
		{
			if( !controlsAreCesarian[k] ) 
			{
				controlVals[k] = rnorm(1)
			}
			else
			{
				controlVals[k] = rnorm( mean= effectSize )
			}
		}
		
		caseVals <- vector()
		
		for ( k in 1:numCases ) 
		{
			if( rnorm(1) <= fractionCesarian ) 
			{
				caseVals[k] = rnorm(1)
			}
			else
			{
				controlVals[k] = rnorm( mean= effectSize )
			}
		}
	}
}