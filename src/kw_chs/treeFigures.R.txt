##draw seqtrack transmission trees, epidemiology tree, patient figure
##color nodes by hospital, lines by epidemiology, writing by whether is ST258
##kleb pneu only


rm(list=ls())
# setwd("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\paper1_analysisMethods\\figures")
setwd("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\CHS paper\\CHS figures")
datadir = "C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\paper1_analysisMethods\\figures\\"

library(ape)
library(adegenet)
library(igraph)
library(RBGL)
library(Rgraphviz)

MAXDIST=11 #maximum SNP distance to consider as possibly part of same outbreak in broad

##get data
all.data = read.table("AllDistances.txt", 
                      sep="\t", header=T, colClasses=c(rep("numeric", 4), "character", "character", rep("numeric", 8)))
meta = read.table(paste(datadir, "UNCCMetaData_Final_8-5-15.txt", sep=""), 
                  sep="\t", header=T, colClasses = c("numeric", "numeric", rep("character", 7)))
strains = unique(c(all.data$xID, all.data$yID))
# unique(meta$Species[meta$SpecNumber %in% strains]) #only kleb pneu
strains = strains[order(strains)] #here are only looking at those strains we have comparisons for all samples

##get strains that are st258
st258 = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\CarolinaST258Genomes.txt", colClasses="character")
st258 = as.numeric(sub("klebsiella_pneumoniae_chs_", "", st258$V1))

##determine the max distance to include for the other groups, based on the linear regression to broad
##alt = column from data corresponding to a distance metric
convertDist <- function(alt) {
  bdist = all.data$broadCoreGenomeDistance
  mod = lm(alt~bdist) #y~x -> so can give maxdist and return a value
  dist = mod$coefficients[2] * MAXDIST + mod$coefficients[1]
  return(as.numeric(dist))
}
##order of analysis: "Broad Core Genome"", "Co-Phylog", 
##"Align to CP006923 SNP"
max.dist = c(MAXDIST,#convertDist(all.data$broadCoreGenomeDistance), 
             convertDist(all.data$cophylogDistance),
             convertDist(all.data$cpSNPDistance),
             convertDist(all.data$ncSNPDistance)) #converted distances for each metric in same order they are analyzed

##convert to distance matrices, given the data column distance
convertToDist <- function(file) {
  table = read.table(file, header=T, sep="\t", colClasses="numeric")
  colnames(table) = c("xGen", "yGen", "distance")
  dist = matrix(nrow=length(strains), ncol=length(strains))
  for(i in 1:length(strains)) {
    for(j in 1:length(strains)) {
      s1 = strains[i]
      s2 = strains[j]
      val = table$distance[(table$xGen==s1 & table$yGen==s2) | (table$yGen==s1 & table$xGen==s2)]
      if(length(val) == 0 & s1==s2) {
        val = 0
      } else if(length(val) == 0) {
        print(i)
        print(j)
        print("")
        val = NA
      }
      dist[i,j] = val
    }
  }
  return(dist)
}

##need to use original files because not all comparisons made it into AllDistances, but this weeds out missing strains
broad = convertToDist("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\BroadTrees\\distancesUpperTriangle.txt")
snpCP = convertToDist("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\PilonSNPDistanceNoIndel_CP006923.txt")
cophylog = convertToDist("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\CoPhylogSNPDistances.txt")
snpNC = convertToDist("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\PilonSNPDistanceNoIndel_NC_009648.txt")

##culture dates need to be rearranged to same order as strains (also removing strains not in analysis)
cult = rep(NA, length(strains))
for(i in 1:length(strains)) {
  for(j in 1:length(meta$SpecNumber)) {
    if(as.numeric(strains[i]) == meta$SpecNumber[j]) {
      cult[i] = meta$DeID_StudyCultureDate[j]
    }
  }
}
cultureDates = as.POSIXct("2008-01-01") + cult*24*60*60

##get encounter overlap
enc = read.table(paste(datadir, "encounterDaysOverlap.txt", sep=""), header=T, sep="\t", colClasses="numeric")

# ####set up epidemiology trees (tree showing connections between isolates if overlap, pointing from earlier to later culture)
# ##function that returns a graph for the epidemiology tree using the given overlap between the given x and y IDs
# epiTree<-function(xID, yID, overlap) {
#   g = new("graphNEL", nodes=as.character(strains), edgemode="directed")
#   for(i in 1:length(overlap)) {
#     x = xID[i]
#     y = yID[i]
#     if(x %in% strains && y %in% strains) { #only include nodes in other figures
#       if(meta$DeID_StudyCultureDate[meta$SpecNumber==x] <= meta$DeID_StudyCultureDate[meta$SpecNumber==y] && #x cultured before y
#          overlap[i] > 0) {  #overlapped in hospital
#         g = addEdge(as.character(x), as.character(y), g, overlap[i])
#       } else if(meta$DeID_StudyCultureDate[meta$SpecNumber==x] > meta$DeID_StudyCultureDate[meta$SpecNumber==y] && #x cultured before y
#                 overlap[i] > 0) {
#         g = addEdge(as.character(y), as.character(x), g, overlap[i])
#       }
#     }
#   }
#   return(igraph.from.graphNEL(g))
# }

# ##between culture dates
# bt.ig = epiTree(enc$xID, enc$yID, enc$daysOverlapBetweenCultures)
# bt.layout = layout.fruchterman.reingold(bt.ig) #set so same layout for all figures
# ##before last culture date
# bf.ig = epiTree(enc$xID, enc$yID, enc$daysOverlapBeforeLastCulture)
# bf.layout = layout.fruchterman.reingold(bf.ig)
##same hospital between
# same = read.table(paste(datadir, "encounterDaysOverlap_sameHospitalAsCultureOnly.txt", sep=""), 
#                   sep="\t", header=T, colClasses="numeric")
# same.bt.ig = epiTree(same$xID, same$yID, same$daysOverlapBetweenCultures)
# same.bt.layout = layout.fruchterman.reingold(same.bt.ig)
# ##same hospital before
# same.bf.ig = epiTree(same$xID, same$yID, same$daysOverlapBeforeLastCulture)
# same.bf.layout = layout.fruchterman.reingold(same.bf.ig)

##function that returns the edge colors for the given epidemiology tree (tree)
##edges are blue if the genetic dist (from dist) is less than the max distance for that group (a) and gray otherwise
getEpiEdgeCol <- function(tree, dist, a) {
  idx = 1:length(strains) #epi tree already has correct names, need to convert to index
  edges = as_ids(E(tree))
  ecol = rep("gray", length(edges))
  for(i in 1:length(edges)) {
    sp = strsplit(edges[i], "|", fixed=T)[[1]]
    x = idx[strains==as.numeric(sp[1])]
    y = idx[strains==as.numeric(sp[2])]
    if(dist[x,y] < max.dist[a]) {
      ecol[i] = "dodgerblue3"
    }
  }
  return(ecol)
}

#####patient hopsital figure
##merge times together so can space things out better
within = 1 #number of days to merge
hospital = read.table(paste(datadir, "encountersMergedWithin2.txt", sep=""), 
                      header=T, sep="\t", colClasses=c(rep("numeric", 3), "character"))
mergeEnc = data.frame(hospital[1,])
e=1
for(i in 2:nrow(hospital)) {
  if(hospital$patientID[i]==mergeEnc$patientID[e] && hospital$facility[i]==mergeEnc$facility[e] && #same patient and hospital
     hospital$encounterDateStart[i] < mergeEnc$encounterEndDate[e] + within) { #start date is within 5 (the value of within) days of end of last encounter
    mergeEnc$encounterEndDate[e] = hospital$encounterEndDate[i] #update end date
  } else { #new encounter
    mergeEnc = rbind(mergeEnc, hospital[i,])
    e = e+1
  }
}
names(mergeEnc) = names(hospital)


##25 color palette
c25 <- c("dodgerblue2","#E31A1C", # red
         "green4",
         "#6A3D9A", # purple
         "#FF7F00", # orange
         "black","gold1",
         "skyblue2","#FB9A99", # lt pink
         "palegreen2",
         "#CAB2D6", # lt purple
         "#FDBF6F", # lt orange
         "gray70", "khaki2",
         "maroon","orchid1","deeppink1","blue1","steelblue4",
         "darkturquoise","green1","yellow4","yellow3",
         "darkorange4","brown") #from http://stackoverflow.com/questions/9563711/r-color-palettes-for-many-data-classes
# plot(x=rep(1, 25), y=25:1, col=c25, pch=16)
##return unique color for each facility
all.fac = sort(unique(hospital$facility))
##get facilities sorted properly (currently is hospital 1, 10, 11, want 1-12)
temp = sort(as.numeric(sub("Hospital ", "", all.fac[1:11])))
all.fac = c(paste("Hospital", temp), all.fac[12:13])
# colors = c25[1:length(all.fac)] 
colors = c(c25[c(1:5, 8, 10, 16:18, 21)], "gold", "gray")
hospcol = cbind(facility=all.fac, color=colors)
write.table(hospcol, "HospitalColors.txt", row.names = F, col.names=T, quote=F, sep="\t")
# plot(x=rep(1, 13), y=13:1, col=colors, pch=16)
facilityColor <- function(fac) {
  return(colors[all.fac==fac])
}

# ##hospital symbols
# all.fac = sort(unique(hospital$facility))
# fac.symb = c("1", "&", "!", "$", "2", "3", "4", "5", "6", "7", "9", "O", "R")
# names(fac.symb) = all.fac
# facilitySymbol <- function(fac) {
#   # return(fac.symb[all.fac==fac])
#   return("|")
# }

idx = 1:length(strains) #index for strains

##draw base of where patients have been
drawBase<-function(name) {
  for(r in 1:nrow(mergeEnc)) {
    id = mergeEnc[r,1] #sample id
    if(id %in% strains) {
      y = idx[strains==id]
      # symb = facilitySymbol(mergeEnc$facility[r])
      col = facilityColor(mergeEnc$facility[r])
      time = seq(from=mergeEnc$encounterDateStart[r], to=mergeEnc$encounterEndDate[r], by=20)
      # points(x=time, y=rep(y, length(time)), cex=1.5, type="p", pch=symb, col="gray")
      points(x=time, y=rep(y, length(time)), cex=2, type="p", pch="|", col=col)
    }
  }
}

##function that draws the figure of when patients are in the hospital
drawEncounterFig <- function() {
  ##x values
  cDates = rep(-1, length(strains)) #culture dates (x values)
  for(i in 1:length(strains)) {
    cDates[i] = meta$DeID_StudyCultureDate[meta$SpecNumber==strains[i]]
  }
  
  ##y values
  y = seq(1, length(strains))
  
  ##symbols
  #   symb = rep(0, length(strains))
  #   for(i in 1:length(strains)) {
  #     symb[i] = facilitySymbol(meta$Abstracted_StudyFacility[meta$SpecNumber==strains[i]])
  #   }
  ##colors
  col = rep(NA, length(strains))
  for(i in 1:length(strains)) {
    col[i] = facilityColor(meta$Abstracted_StudyFacility[meta$SpecNumber==strains[i]])
  }
  
  ##draw plot outline
  par(mar=c(4.5,5.7,4.1,0.5))
  plot(1, type="n", yaxt="n", xlim=range(mergeEnc$encounterDateStart, mergeEnc$encounterEndDate), ylim=c(1, 71), 
       xlab="Study Date", ylab="", main="Patient Hospital Dates",
       cex.lab=2.5, cex.axis=2, cex.main=2)
  axis(2, at=1:length(strains), labels=strains, cex.axis=2, las=2) #add x-axis labels (strain names)
  mtext("Isolate", cex=2.5, line=3.5, side=2) #y axis label
  ##draw lines
  for(i in 1:length(y)) {
    abline(h=y[i], col=col[i], lty=3)
  }
  ##draw times in hospital
  drawBase()
  ##draw cultures
  points(x=cDates, y=y, cex=4, pch="X", col=col)
}

# ##legend
# jpeg("patientFig_Legend.jpg", height=1300, width=600, res=300)
# # tiff("patientFig_Legend.tiff", height=1300, width=600, res=300)
# par(mar=c(.1, .1, .1, .1))
# plot(1, type="n", yaxt="n", xaxt="n", xlim=c(0,50), ylim=c(0,100), xlab="", ylab="", main="", bty="n")
# legend("topleft", c("Hospital 1", "Hospital 2", "Hospital 3", "Hospital 4", "Hospital 5",  "Hospital 6", "Hospital 7", "Hospital 9", "Hospital 10", "Hospital 11", "Hospital 12", "Outpatient", "Rehab"),
#        pch=c("1", "2", "3", "4", "5", "6", "7", "9", "&", "!", "$", "O", "R"), col="darkgrey", bty='n', cex=1.5)
# dev.off()


####needed functions for drawing seqtrack graphs
##function that given graphNEL returns the xy coordinates
getCoord<-function(graph) {
  ag = agopen(graph, name=names[a])
  nod = AgNode(ag) #most likely equivalent to attributes(plot)$AgNode
  n1 = nod[[1]]
  cent = getNodeXY(n1) #xy coordinates of the center
  xy = data.frame(x=cent$x, y=cent$y)
  for(i in 2:length(nod)) {
    cent = getNodeXY(nod[[i]])
    xy = rbind(xy, c(cent$x, cent$y))
  }
  return(xy)
}

##returns edge colors  for the given graph
##black if no evidence, orange if overlap between culture dates, pink if not between dates but before last culture date 
##if fixName is true, then the edges are the position in the list of strains, otherwise the edges are the strain names
getEdgeCol <- function(graph, fixName=T) {
  edges = as_ids(E(graph))
  edge.col = rep("black", length(edges))
  for(i in 1:length(edges)) {
    sp = strsplit(edges[i], "|", fixed=T)[[1]]
    x = as.numeric(sp[1])
    y = as.numeric(sp[2])
    if(fixName) {
      p = which((enc$xID==strains[x] & enc$yID==strains[y]) | 
                  (enc$xID==strains[y] & enc$yID==strains[x])) ##position in encounter data
    } else {
      p = which((enc$xID==x & enc$yID==y) | 
                  (enc$xID==y & enc$yID==x)) ##position in encounter data
    }
    if(enc$daysOverlapBetweenCultures[p] > 0) {
      edge.col[i] = "orange"
    } else if(enc$daysOverlapBeforeLastCulture[p] > 0) {
      edge.col[i] = "pink"
    }
  }
  return(edge.col)
}

# ##returns the node colors for the given list of groups, based on hospital
# colors = c("seagreen1", "cornflowerblue", "pink", "khaki", "darkgreen",
#            "orange", "purple", "red", "darkgrey", rep("blue",4))
# melHosp = c("Hospital 1", "Hospital 2", "Hospital 3", "Hospital 4", "Hospital 5", "Hospital 7",
#             "Hospital 9", "Rehab", "Outpatient", "Hospital 6", "Hospital 10", "Hospital 11", "Hospital 12")
col = rep(NA, length(strains))
for(i in 1:length(strains)) {
  col[i] = facilityColor(meta$Abstracted_StudyFacility[meta$SpecNumber==strains[i]])
}
getNodeCol <- function() {
  return(col)
}

##make tree legend
# jpeg("TxTree_Legend.jpg", height=1500, width=1400, res=300)
tiff("TxTree_Legend.tiff", height=1600, width=1400, res=300)
par(mar=c(.1, .1, .1, .1))
plot(1, type="n", yaxt="n", xaxt="n", xlim=c(0,50), ylim=c(0,100), xlab="", ylab="", main="", bty="n")
legend("topleft", 
       legend = c(expression(underline("KEY")), all.fac,
                  "encounter between culture dates", "encounter before later culture date", "no encounter"),
       col = c("white", colors, "orange", "pink", "black"),
       pch=c(NA, rep(16, 13), rep(NA, 3)), 
       lty = c(NA, rep(0, 13), rep(1, 3)),
       bty='n', cex=1.5, lwd=2)
dev.off()


##get list of distance matrices to run
distmats = list(broad, cophylog, snpCP, snpNC)
names = c("Assembly Core Genome", "Co-phylog", "Aligned to CP006923", "Aligned to NC009648")
fnames = c("Assembly", "Co-phylog", "CP006923", "NC009648") #file names
# fig.labels = c("A", "B", "C", "D", "E") #figure labels
fig.labels = rep("", length(names))
# all.edges = data.frame(xID=character(), yID=character(), numInFullTree=numeric(), numInSubTree=numeric()) #data from of the number of times the edge from x to y appears in a seqtrack tree (full and with edges removed)

###returns labels to be used on the edges of a plot;
###if the edge is present in the assembly tree, add a star
###graph is class igraph
getEdgeLabels <- function(graph) {
  assembly.tree = read.table(paste("TxTree_SeqTrack_", fnames[1], ".txt", sep=""),
                             header=T, sep="\t", colClasses = c(rep("numeric", 2), "logical", rep("numeric", 2)))
  graph.edges = as_ids(E(graph))
  edge.lab = E(graph)$weight
  for(i in 1:length(graph.edges)) {
    sp = strsplit(graph.edges[i], "|", fixed=T)[[1]]
    x = strains[as.numeric(sp[1])]
    y = strains[as.numeric(sp[2])]
    if(assembly.tree$ances[assembly.tree$isolate==y]==x) {
      edge.lab[i] = paste(edge.lab[i], "*", sep="\n")
    }
  }
  return(edge.lab)
}

#####
##seqtrack
a=1 #analysis number
for(d in distmats) {
  ##get seqtrack figure
  print(paste("SeqTrack", names[a]))
  st = seqTrack(d, x.names=strains, x.dates=cultureDates, best="min")
  graph = plot(st)
  all.graph = as_graphnel(graph)
  
  ##remove the edges with distance over max.dist
  rem = st$weight > max.dist[a]
  rem[is.na(rem)] = TRUE
  sub.st = st
  sub.st$ances[rem] = NA
  sub.ig = plot(sub.st)
  sub.graph = as_graphnel(sub.ig)
  
  ##print tree with parents and degrees
  deg=degree(sub.graph)
  df = data.frame(isolate = strains[st$id], ances=strains[st$ances], edgeAboveCutoff=rem,
                  removeEdgeInDegree = deg$inDegree, removeEdgeOutDegree = deg$outDegree)
  write.table(df, paste("TxTree_SeqTrack_", fnames[a], ".txt", sep=""), sep="\t", row.names = F,
              col.names = T, quote=F)
  
  ##get node colors
  col = getNodeCol()
  
  #   ##font color and node outline are black if st258 else white
  #   node.font.col = rep("white", length(col))
  #   node.font.col[strains %in% st258] = "black"
  node.font.col="black"
  
  ##get edge colors; black if no evidence, orange if overlap between culture dates, pink if not between dates but before last culture date 
  edge.col = getEdgeCol(sub.ig)
  
  ##for non-assembly trees, add asterisk to indicate if edge present in assembly tree
  edge.lab = E(graph)$weight
  sub.edge.lab = E(sub.ig)$weight
  if(a > 1) {
    edge.lab = getEdgeLabels(graph)
    sub.edge.lab = getEdgeLabels(sub.ig)
  }
  
  ##get graphNEL coordinates
  xy = getCoord(sub.graph)
  mat = cbind(xy$x, xy$y)
  # mat = cbind(xy$x, -cultureDates)
  # mat = cbind(xy$x, -log10(cult))
  
  ##draw seqtrack tree with edges removed
  # jpeg(paste("TxTree_SeqTrack_", fnames[a], ".jpg", sep=""), height=8000, width=8000, res=300)
  tiff(paste("TxTree_SeqTrack_", fnames[a], ".tiff", sep=""), height=8000, width=8000, res=300)
  par(mar=c(.01, .1, 2.5, .1), cex.main=4)
  plot(sub.ig, layout=mat, vertex.label=row.names(st), vertex.color=col, vertex.label.color=node.font.col, vertex.label.cex=4, vertex.size=6, vertex.frame.color=node.font.col,
       edge.label.cex=3, edge.color=edge.col, edge.width=4, edge.label.color="dodgerblue3", 
       edge.arrow.size=1.5, edge.label = sub.edge.lab,
       main=paste(names[a], ", Removed edges greater than ", round(max.dist[a], digits=1), " mutations", sep=""))
  dev.off()
  
  #   ##make figures for combining with patient data
  #   if(a == 1) { #just do broad
  #     ##rotate tree for patient figure
  #     curr.y = sort(unique(xy$y))
  #     yval = seq(from=0, length=length(curr.y), by=-10)
  #     newy = rep(-1, length(xy$y))
  #     for(i in 1:length(curr.y)) {
  #       newy[xy$y==curr.y[i]] = yval[i]
  #     }
  #     xval = seq(from=10, length=71, by=200)
  #     mat = cbind(newy, xval) 
  #     
  #     jpeg(paste("TxTreeRotate_SeqTrack_", fnames[a], ".jpg", sep=""), height=8000, width=8000, res=300)
  #     # tiff(paste("TxTreeRotate_SeqTrack_", fnames[a], ".tiff", sep=""), height=8000, width=8000, res=300)
  #     par(mar=c(.1, .001, .1, 1))
  #     plot(sub.ig, layout=mat, vertex.label=row.names(st), vertex.color=col, vertex.label.color=node.font.col, vertex.label.cex=2, vertex.size=3, vertex.frame.color=node.font.col,
  #          edge.label.cex=2, edge.color=edge.col, edge.label.color="dodgerblue3",  edge.arrow.size=1.5, edge.width=4)
  #     #dev.off()
  #     
  #     ##draw lines to connect to patient figure - draw on top of existing graph
  #     uniquex = sort(unique(mat[,1]))
  #     par(bg=NA, mar=c(1.1, .2, 1.1, 0), new=T)
  #     xlim = range(mat[,1]) #need x to be longer on right
  #     plot(1, type="n", axes=0, xlim=c(xlim[1], 1), ylim=range(mat[,2]), xlab="", ylab="")
  #     for(i in 1:nrow(mat)) {
  #       lines(x=c(mat[i,1], 1), y=c(mat[i,2], mat[i,2]), lty=3, col=col[i])
  #     }
  #     dev.off()
  #     
  #     ##draw epidemiology tree for between culture dates
  # #     node.font.col = rep("white", length(col))
  # #     node.font.col[strains %in% st258] = "black"
  #     node.font.col = "black"
  #     # tiff(paste("EpiTreeBetweenCulture_", fnames[a], ".tiff", sep=""), height=8000, width=8000, res=300)
  #     jpeg(paste("EpiTreeBetweenCulture_", fnames[a], ".jpg", sep=""), height=8000, width=8000, res=300)
  #     epi.edge.col = getEpiEdgeCol(bt.ig, d, a)
  #     par(mar=c(.1, .1, 2, .1), cex.main=3)
  #     plot(bt.ig, layout=bt.layout, vertex.color=col, vertex.label.color=node.font.col, vertex.label.cex=4, vertex.size=6, vertex.frame.color=node.font.col,
  #          edge.width=4, edge.color=epi.edge.col, edge.arrow.size=1.5, main="Encounters Between Culture Dates")
  #     dev.off()
  #     
  #     ##draw epidemiology tree for before last culture date
  #     epi.edge.col = getEpiEdgeCol(bf.ig, d, a)
  #     # tiff(paste("EpiTreeBeforeLastCulture_", fnames[a], ".tiff", sep=""), height=8000, width=8000, res=300)
  #     jpeg(paste("EpiTreeBeforeLastCulture_", fnames[a], ".jpg", sep=""), height=8000, width=8000, res=300)
  #     par(mar=c(.1, .1, 2, .1), cex.main=3)
  #     plot(bf.ig, layout=bf.layout, vertex.color=col, vertex.label.color=node.font.col, vertex.label.cex=4, vertex.size=6, vertex.frame.color=node.font.col,
  #          edge.width=4, edge.color=epi.edge.col, edge.arrow.size=1.5, main="Encounters Before Later Culture Date")
  #     dev.off()
  #     
  #     
  #   }
  
  ##draw full tree
  xy = getCoord(all.graph)
  mat = cbind(xy$x, xy$y)
  edge.col = getEdgeCol(graph)
  edge.label.color = ifelse(rem, "red", "dodgerblue3")#red if above cutoff
  tiff(paste("TxTreeAllEdges_SeqTrack_", fnames[a], ".tiff", sep=""), height=8000, width=8000, res=300)
  # jpeg(paste("TxTreeAllEdges_SeqTrack_", fnames[a], ".jpg", sep=""), height=8000, width=8000, res=300)
  par(mar=c(.001, .1, 2.75, .1), cex.main=4.5)
  plot(graph, layout=mat, vertex.label=row.names(st), vertex.color=col, vertex.label.color=node.font.col, vertex.label.cex=4, vertex.size=6, vertex.frame.color=node.font.col,
       edge.label.cex=2, edge.color=edge.col, edge.width=4, edge.label.color=edge.label.color,
       edge.arrow.size=1.5, edge.label = edge.lab, main=names[a])
  par(new=T, mar=c(0,0,0,0), xpd=T)
  plot(1, type="n", axes=0, xlab="", ylab="")
  legend("topleft", fig.labels[a], cex=8, bty="n", inset=c(-.08, -.035))
  dev.off()
  
  a = a + 1
}

##draw patient encounter figure
tiff("patientFig.tiff", height=8000, width=6000, res=300)
# jpeg("patientFig.jpg", height=8000, width=6000, res=300)
drawEncounterFig()
dev.off()
