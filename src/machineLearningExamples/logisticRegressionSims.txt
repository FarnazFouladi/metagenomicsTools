# my attempt at R code for Figure 2.1 in 4th edition of 
# elements of statistical learning

rm(list=ls())

numDataPoints <- 100

classBlue <- rnorm(10,mean=1);
classOrange <- rnorm(10, mean=0);

blueDataX1 <- vector();
blueDataX2 <- vector();
orangeDataX1 <- vector();
orangeDataX2<- vector();

for( i in 1:numDataPoints)
{
	blueDataX1[i] <- rnorm(1, mean=classBlue[ sample(1:10,1) ], sd = 1/5)
	orangeDataX1[i] <- rnorm(1, mean=classOrange[sample(1:10,1)],sd = 1/5)
	blueDataX2[i] <- rnorm(1, mean=classBlue[sample(1:10,1)],sd = 1/5)
	orangeDataX2[i] <- rnorm(1, mean=classOrange[sample(1:10,1)],sd = 1/5)
}

colors <- c( rep("BLUE", numDataPoints), rep ("ORANGE", numDataPoints))
values <- c( rep(0, numDataPoints), rep (1, numDataPoints))

mergedDataX1 <- c(  blueDataX1, orangeDataX1 );
mergedDataX2 <-  c(  blueDataX2, orangeDataX2);

plot(mergedDataX1, values,col=colors)

myLogReg <- glm( values ~ mergedDataX1 ,family = binomial)
summary(myLogReg)

xSeq <- seq(min(mergedDataX1), max(mergedDataX1), 0.001)

getProb <- function(x, B0, B1)
{
	return (1 / (1 + exp(-(B0 + B1 * x ))))
}

lines( xSeq, getProb(xSeq, coef(myLogReg)[1], coef(myLogReg)[2]),col="red")

# compare to the linear model..
myLm <- lm( values ~ mergedDataX1)

getProbLm <- function( x, B0, B1)
{
	return ( B0 + B1 * x )
}

lines( xSeq, getProbLm(xSeq, coef(myLm)[1], coef(myLm)[2]),col="black")

# now look at two dimensions

plot(mergedDataX1, mergedDataX2, col=colors)
aLm2D <- lm( values ~ mergedDataX1 + mergedDataX2 )
decisionX <- seq( min(mergedDataX1), max(mergedDataX1), 0.001)
decisionY <- ( 0.5 - coef(aLm2D )[1] - coef(aLm2D )[2] * decisionX ) / coef(aLm2D)[3]
lines(decisionX, decisionY)

getProb2D <- function( x1,x2,B0,B1,B2)
{
	return (1 / (1 + exp(-B0 + B1 * x1 + B2 * x2 )))
}

myLogReg2D <- glm( values ~ mergedDataX1 +mergedDataX2 ,family = binomial)
B0 <- coef(myLogReg2D)[1]
B1 <- coef(myLogReg2D)[2]
B2 <- coef(myLogReg2D)[3]

x1Seqs <- seq( min(mergedDataX1), max(mergedDataX1), (max(mergedDataX1) - min(mergedDataX1)) / 100)
x2Seqs <- seq( min(mergedDataX2), max(mergedDataX2), (max(mergedDataX2) - min(mergedDataX2)) / 100)

xLines <-vector()
yLines <-vector()
gridIndex <-0

for ( x in x1Seqs ) 
{
	for( y in x2Seqs ) 
	{
		prob <- getProb2D( x,y,B0,B1,B2 );
		print(prob)
		if( abs(prob-0.5) < 0.001)
		{
			gridIndex = gridIndex + 1;
			xLines[gridIndex] = x
			yLines[gridIndex] = y
			points(x, y, pch=21,col="RED")
		}
	
	}
	
}

lines(xLines, yLines, col="RED")
	
