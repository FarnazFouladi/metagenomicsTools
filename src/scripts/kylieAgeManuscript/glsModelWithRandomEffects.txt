rm(list=ls())
library("nlme")

setwd("G:\\KylieManuscript_April_27_2015\\RoshondaDropBox\\classifications\\tables\\rdpClassifier")

#taxaLevels <- c("phylum","class","order","family","genus")
taxaLevels <- c("family")

#par(mfrow=c(5,3))
for(taxa in taxaLevels ) 
{
    # uncomment for pcoa
	#inFileName <- paste( "pcoa_",taxa,"withMetadata.txt", sep ="")
	
	inFileName <- paste(taxa, "_rdpClassifierPlusMetadata.txt", sep ="")
	
	myT <-read.table(inFileName,header=TRUE,sep="\t")
	numCols <- ncol(myT)
	myColClasses <- c(rep("character",6), rep("numeric", numCols-6))
	myT <-read.table(inFileName,header=TRUE,sep="\t",colClasses=myColClasses)
	
	pValuesTime <- vector()
	pValuesDiet <- vector()
	pValuesSubjectCage <- vector()
	intraclassCoefficient <- vector()
	averageNormCounts <- vector()
	names <- vector()
	
	index <- 1
	for( i in 7:ncol(myT)) 
	{	
		subTable <- myT[ ! is.na(myT[,i]) ,]
		if( sum(subTable[,i] != 0) >= nrow(myT)/4 )
		{
			bug <- subTable[,i]
			diet <- subTable$diet
			time<- subTable$dateAsFactor
			subjectID <- subTable$animalID
			cage <- subTable$cage
			myFrame <- data.frame( bug,diet,time,subjectID , cage)
			
			fullModel <- gls( bug~  diet+ time, method="REML",correlation=corCompSymm(form=~1|cage/subjectID),data = myFrame )
			reducedModel <- gls( bug~  diet+ time, method="REML", data = myFrame )
			fullModelLME <- lme( bug~  diet+ time, method="REML", random = ~1|cage/subjectID, data = myFrame)
			
			averageNormCounts[index] <- mean(bug)
			pValuesDiet[index] <-anova(fullModelLME)$"p-value"[2]
			pValuesTime[index] <- anova(fullModelLME)$"p-value"[3]
			
			pValuesSubjectCage[index] <-  anova(fullModelLME, reducedModel)$"p-value"[2]
			intraclassCoefficient[index]<- coef(fullModel$modelStruct[1]$corStruct,unconstrained=FALSE)[[1]]
			names[index] = names(subTable)[i]
			
			index <- index + 1
		}		
	}
	
	dFrame <- data.frame( pValuesTime,pValuesDiet ,pValuesSubjectCage ,intraclassCoefficient ,averageNormCounts ,names  ) 
	#dFrame <- dFrame [order(dFrame$pValuesTreatment),]
	dFrame$adjustedPDiet <- p.adjust( dFrame$pValuesDiet , method = "BH" )
	dFrame$adjustedPTime<- p.adjust( dFrame$pValuesTime, method = "BH" )
	dFrame$adjustedPSubjectCage <- p.adjust(dFrame$pValuesSubjectCage, method = "BH" )
	
	write.table(dFrame, file=paste("pValuesFor_", taxa, ".txt",sep=""), sep="\t",row.names=FALSE)
}
							