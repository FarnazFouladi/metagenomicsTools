rm(list=ls())
library("pscl")
library("lmtest")
library("nlme")

# these are available at
# https://github.com/afodor/metagenomicsTools/tree/master/src/scripts/ratSach2/rdpAnalysis/spreadsheets
setwd("C:\\Users\\afodor\\git\\metagenomicsTools\\src\\scripts\\ratSach2\\rdpAnalysis\\spreadsheets")

taxaLevels <- c("phylum","class","order","family","genus")
tissueTypes <- c("Cecal Content", "Colon content")

for(taxa in taxaLevels ) 
	for(tissue in tissueTypes) 
{
    inFileName <- paste( "sparseThreeColumn_", taxa, "_AsColumnsLogNormalizedPlusMetadata.txt", sep ="")
	
	myT <-read.table(inFileName,header=TRUE,sep="\t")
	numCols <- ncol(myT)
	myColClasses <- c(rep("character",6), rep("numeric", numCols-6))
	myT <-read.table(inFileName,header=TRUE,sep="\t",colClasses=myColClasses)
	
	myT <- myT[ which( myT$tissue== tissue) , ]
	
	pValuesLine <- vector()
	pValuesCage <- vector()
	averageHigh <- vector()
	averageLow <- vector()
	iccs <- vector()
	names <- vector()
	
	index <- 1
	for( i in 7:numCols) 
	{	
		if( sum(myT[,i] != 0) >= nrow(myT)/4 )
		{
			print( paste(i , " of ", numCols, " with ", index ,sep=""))
			
			if (.Platform$OS.type == "windows") flush.console()
			
			bug <- myT[,i]
			line <- factor(myT$line)
			cage <- factor(myT$cage)
		
			averageHigh[index] <- mean( myT[myT$line=="High",i])
			averageLow[index] <- mean( myT[myT$line=="Low",i])
				
	
			myFrame <- data.frame(bug, line, cage)
	
			fullModel <- gls( bug~  line , method="REML",correlation=corCompSymm(form=~1|factor(cage)),
				data = myFrame )
				
			reducedModel <- gls( bug~  line , method="REML",	data = myFrame )
				
			fullModelLME <- lme(bug~  line , method="REML", random = ~1|factor(cage), data = myFrame)		
	
			pValuesLine[index] <- anova(fullModelLME)$"p-value"[2]
			pValuesCage[index] <-  anova(fullModelLME, reducedModel)$"p-value"[2]
			iccs[index]<- coef(fullModel$modelStruct[1]$corStruct,unconstrained=FALSE)[[1]]
			names[index] = names(myT)[i]
			
			index = index + 1
	
		}		
	}
	
	
	
	dFrame <- data.frame( names, pValuesLine,pValuesCage ,iccs, averageHigh, averageLow) 
	dFrame <- dFrame [order(dFrame$pValuesLine),]
	dFrame$adjustedPLine <- p.adjust( dFrame$pValuesLine, method = "BH" )
	dFrame$adjustedCage <- p.adjust( dFrame$pValuesCage, method = "BH" ) 
	
	write.table(dFrame, file=paste("pValuesForLine_taxa_", tissue, "_", taxa, ".txt",sep=""), sep="\t",row.names=FALSE)
}
							