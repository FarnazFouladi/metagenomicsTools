rm(list=ls())

setwd("C:\\tingData")

pdf(paste("boxplots", ".pdf", sep=""))

inFileName <- paste("otuAsColumnsLogNormPlusMetadata.txt", sep ="")
myT <-read.table(inFileName,header=TRUE,sep="\t")
numCols <- ncol(myT)
myColClasses <- c(rep("character",3), rep("numeric", numCols-3))
myT <-read.table(inFileName,header=TRUE,sep="\t",colClasses=myColClasses)
	
myT <- myT[ myT$numberSequencesPerSample >= 1000 , ]

names <- vector()
pValuesGenotype <- vector()
pValuesTime <-vector()
pValuesMaxWeightLossPercent <- vector()
pValuesCages <- vector()

pValueIModelWeight <- vector()
pValueIModelGenotype <- vector()
pValueIModelTime <- vector()
pValueIWeightGenotype <- vector()
pValueIWeightTime <- vector()
pValueIGenotypeTime <- vector()
pValueAllInteractions <- vector()
	
index <- 1

for( i in c(9:ncol(myT))) 
	if( sum( myT[,i] >0 ) > nrow(myT) /4 ) 
	{	
		par(mfcol=c(2,2), mar=c(4,4,1,1), oma=c(2,2,1,1))
		
		#bottom, left, top and right margins 
		#par(mar=c(1,1,1,1))
		myLm <- lm( myT[,i] ~  factor( myT$genotype) )
		myAnova <- anova(myLm)
		pValuesGenotype[index] <- myAnova$"Pr(>F)"[1]
		names[index] <- names(myT)[i]
		
		#plot(1, type="n", axes=F, xlab="", ylab="", main=names[index], cex.main=.95)
			
		boxplot( myT[myT$genotype=="KO",i] ,
				myT[myT$genotype=="WT",i], main=paste("genotype", " p=" , format( pValuesGenotype[index],
				digits=3)), names =c("KO", "WT"), col=c("RED","BLUE"))
				
		 mtext(names[index] ,
        SOUTH<-1, line=0.2, adj=1.0, cex=.7,   col="black", outer=TRUE)
		
		
			
		bug <- myT[,i]
		
		genotypes<- factor( myT$genotype)
		myFrame <- data.frame(bug, genotypes)
			
		stripchart(bug ~ genotypes, 
				data = myFrame,vertical = TRUE, pch = 21, add=TRUE, ylab = names[index])		
			
			
		lmTime <- lm(myT[,i] ~  myT$time)
		myAnovaTime <- anova(lmTime)
		pValuesTime[index] <- myAnovaTime$"Pr(>F)"[1]

	
		lmWeightLossPercent <- lm(myT[,i] ~  myT$maxWeightLossPercent)
		myAnovaLoss <- anova(lmWeightLossPercent )
		pValuesMaxWeightLossPercent[index] <- myAnovaLoss$"Pr(>F)"[1]

				
		plot(  myT$time, myT[,i], main = paste( "time p=", format( pValuesTime[index], digits=3 ),
		"r-squared","=", format(summary(lmTime)$r.squared,digits=3)),
			ylab = "logNorm(bug)", xlab = "time",	 
		col= ifelse(myT$genotype == "KO", "RED", "BLUE"),cex.main=.9)
		abline(lmTime)
		
		
		plot( myT$maxWeightLossPercent,myT[,i],
		 main =paste("weight % p =", format( pValuesMaxWeightLossPercent[index], digits=3 ),
		 "r-squared","=", format(summary(lmWeightLossPercent)$r.squared,digits=3) ),
		 	 col= ifelse(myT$genotype == "KO", "RED", "BLUE"), ylab="logNorm(bug)",
		 	 xlab="max loss weight percent",cex.main=.9)
		abline(lmWeightLossPercent)
		
		lmWeightAndGenotype<- lm(myT[,i] ~  myT$maxWeightLossPercent * myT$genotype * myT$time)
		anvoaI <- anova(lmWeightAndGenotype)
		pValueIModelWeight[index] <- anvoaI$"Pr(>F)"[1]
		pValueIModelGenotype[index] <- anvoaI$"Pr(>F)"[2]
		pValueIModelTime[index] <- anvoaI$"Pr(>F)"[3]
		pValueIWeightGenotype[index] <- anvoaI$"Pr(>F)"[4]
		pValueIWeightTime[index] <- anvoaI$"Pr(>F)"[5]
		pValueIGenotypeTime[index] <- anvoaI$"Pr(>F)"[6]
		pValueAllInteractions[index] <- anvoaI$"Pr(>F)"[7]
		
		
		boxLm <- lm( myT[,i] ~ myT$cage )
		pValuesCages[index] =  anova(boxLm)$"Pr(>F)"[1]
		
		boxplot(  myT[,i] ~ myT$cage, las =2, 
			main = paste("cage p=",format(pValuesCages[index],digits=3) ) )
	
	
		index <- index + 1	
				
	}
		
hist(pValuesGenotype, breaks=20)
hist(pValuesTime,breaks=20)
hist(pValuesMaxWeightLossPercent, breaks=20)
hist(pValuesCages, breaks=20)

dFrame <- data.frame( names,pValuesGenotype,pValuesTime,pValuesMaxWeightLossPercent,pValuesCages,
pValueIModelWeight,pValueIModelGenotype,pValueIModelTime,pValueIWeightGenotype,
pValueIWeightTime,pValueIGenotypeTime,pValueAllInteractions) 
dFrame <- dFrame [order(dFrame$pValuesMaxWeightLossPercent),]
dFrame$pValuesGenotypeAdjusted <- p.adjust( dFrame$pValuesGenotype, method = "BH")
dFrame$pValuesTimeAdjusted <- p.adjust( dFrame$pValuesTime, method = "BH")
dFrame$pValuesMaxWeightLossPercentAdjust <- p.adjust( dFrame$pValuesMaxWeightLossPercent, method = "BH")
dFrame$pValuesCageAdjust<- p.adjust( dFrame$pValuesCages, method = "BH")

dFrame$pValueIModelWeightAdjust<- p.adjust( dFrame$pValueIModelWeight, method = "BH")
dFrame$pValueIModelGenotypeAdjust<- p.adjust( dFrame$pValueIModelGenotype, method = "BH")
dFrame$pValueIModelTimeAdjust<- p.adjust( dFrame$pValueIModelTime, method = "BH")
dFrame$pValueIWeightGenotypeAdjust<- p.adjust( dFrame$pValueIWeightGenotype, method = "BH")
dFrame$pValueIWeightTimeAdjust<- p.adjust( dFrame$pValueIWeightTime, method = "BH")
dFrame$pValueIGenotypeTimeAdjust<- p.adjust( dFrame$pValueIGenotypeTime, method = "BH")
dFrame$pValueAllInteractionsAdjust<- p.adjust( dFrame$pValueAllInteractions, method = "BH")


write.table(dFrame, file=paste("pValuesOtu.txt",sep=""), sep="\t",row.names=FALSE)
dev.off()
						