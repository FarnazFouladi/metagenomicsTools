
rm(list=ls())

setwd("C:\\VanderbiltSequences_Dec52014\\spreadsheets")
level <- "genus"

myT <- read.table(paste("mergedKrakenRDP_", level,"_WithMetadata.txt",sep=""), header=TRUE, sep="\t")
# remove outlier samples
myT <- myT[ myT$sample != "ST00046_all2" & myT$sample != "ST00045_all1", ]
pdf(paste(level,"_wgsVs16.pdf",sep=""))

getColors <- function(data) 
{	
	colors <- vector();
	
	for( i in 1:length(data) )
	{
		if( data[i]== "stool" )
			colors[i] <- "red"
		else
			colors[i] <- "blue"
	}
	
	return (colors)
}

isIn <- function(element, vector)
{
	foundIt <- FALSE;
	
	for( i in 1:length(vector))
	{
		if( vector[i] == element )
			foundIt <- TRUE;
	}
	
	return (foundIt)
}

removeDuplicateStool <- function(myT)
{
	includedSubjects =  unique(myT$subjectID[myT$stoolOrSwab=="swab"])
	
	includedRows <- vector()
	index <- 1
	
	for( i in 1: nrow(myT))
	{
		if( (! isIn( myT$subjectID[i] , includedSubjects  ) ) || myT$stoolOrSwab[i]=="swab" )
		{
			includedRows[index] <- i;
			index = index +1;
		}
		
	}
	
	myT <- myT[includedRows,];
	return ( myT );
	
}

getIncludedTaxa <- function(myT)
{
	taxa <- vector();
	data <- myT$maxKrakenFraction
	index <-1
	
	for ( i in 1:nrow(myT))
	{
		if(data[i] > 0.01) 
		{
			taxa[index] <- paste( myT[i,]$taxa, "", sep="")
			index <- index + 1;
		}
	}
	
	taxa <- unique( taxa )
	taxa <- sort(taxa)
	return ( taxa )
	
}

myT <- removeDuplicateStool(myT)
taxa <- getIncludedTaxa(myT)
minVal <- 1

for( i in 1 : length(taxa)) 
{
	myLm <- lm( log10(myT$kraken16SLevel[myT$taxa==taxa[i]]+minVal) ~ log10(myT$krakenLevel[myT$taxa==taxa[i]]+minVal) )	
	
	kraken16STPre = 
		wilcox.test( log10(myT$kraken16SLevel[myT$taxa==taxa[i] & myT$isStoolOrSwab=='swab'
							& myT$time=="pre"]+minVal) 
							,myT$kraken16SLevel[myT$taxa==taxa[i] & myT$isStoolOrSwab=='stool'
							& myT$time=="pre"]+minVal)$p.value
	
	krakenWGPre= 
		wilcox.test( log10(myT$krakenLevel[myT$taxa==taxa[i] & myT$isStoolOrSwab=='swab'& myT$time=="pre"]+minVal) 
			,myT$krakenLevel[myT$taxa==taxa[i] & myT$isStoolOrSwab=='stool'& myT$time=="pre"]+minVal)$p.value
			
	kraken16STPost= 
		wilcox.test( log10(myT$kraken16SLevel[myT$taxa==taxa[i] & myT$isStoolOrSwab=='swab'
							& myT$time=="post"]+minVal) 
							,myT$kraken16SLevel[myT$taxa==taxa[i] & myT$isStoolOrSwab=='stool'
							& myT$time=="post"]+minVal)$p.value
						
	krakenWGPost= 
		wilcox.test( log10(myT$krakenLevel[myT$taxa==taxa[i] & myT$isStoolOrSwab=='swab'& myT$time=="post"]+minVal) 
			,myT$krakenLevel[myT$taxa==taxa[i] & myT$isStoolOrSwab=='stool'& myT$time=="post"]+minVal)$p.value
	
			
	aTitle <- paste( taxa[i],"\nr2 = ", round( summary(myLm)$r.squared, 3) , " p = ", format(anova(myLm)$"Pr(>F)"[1],digits=3),
	"\n Pre: 16S =", format(kraken16STPre,digits=3), " WG=", format(krakenWGPre, digits=3),
	"\n Post: 16S =", format(kraken16STPost,digits=3), " WG=", format(krakenWGPost, digits=3))
	plot( log10( myT$krakenLevel[myT$taxa==taxa[i]]+minVal) , log10(myT$kraken16SLevel[myT$taxa==taxa[i]]+minVal),
				,col =  getColors(myT$isStoolOrSwab[myT$taxa==taxa[i]]) , main=aTitle, xlab="1og10(krakenWholeGenome)",
				ylab="log10(kraken16S)",pch=15,cex=1.3,cex.lab=1.3,cex.main=1.3)
	abline(myLm)

}

write.table(myT, file="quickCheck.txt", sep ="\t", row.names=FALSE)
dev.off()