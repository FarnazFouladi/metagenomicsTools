
rm(list=ls())
library("Kendall")

# this function from...
#http://stackoverflow.com/questions/19096983/when-simulating-multivariate-data-for-regression-how-can-i-set-the-r-squared-e
simulate <- function(n.obs=200, beta=c(5, 3, -2), R.sq) {
    stopifnot(length(beta) == 3)
    df <- data.frame(x1=rnorm(n.obs))  
    var.epsilon <- (beta[2]^2 ) * (1 - R.sq) / R.sq
    stopifnot(var.epsilon > 0)
    df$epsilon <- rnorm(n.obs, sd=sqrt(var.epsilon))
    df$y <- with(df, beta[1] + beta[2]*x1 + epsilon)
    return(df)
}
get.R.sq <- function(desired) {
    model <- lm(y ~ x1 , data=simulate(R.sq=desired))
    return(summary(model)$r.squared)
}

# confirm that we are acheiving the desired r-squareds..
df <- data.frame(desired.R.sq=seq(from=0.05, to=0.95, by=0.05))
df$actual.R.sq <- sapply(df$desired.R.sq, FUN=get.R.sq)
plot(df)
abline(a=0, b=1, col="red", lty=2)

numComparisons = 632
fractionPositive <- 0.1

pValues <- vector()
isPositive <- vector()
	
for( i in 1:numComparisons)
{
	isPositive[i] <- (rnorm(1) <= fractionPositive)
	aSim <- simulate( R.sq=0.04)
	
	if(! isPositive[i] ) 
	{
		aSim <- simulate( R.sq=0.00)	
	}
	
	pValues[i]  = Kendall(aSim$x, aSim$y)$sl[1];	 
}

myFrame <- data.frame(pValues,isPositive  )
myFrame<- myFrame [order(myFrame$pValues),]
myFrame$pAdjust <- p.adjust(myFrame$pValues, method="BH")

bhUnder <- 0;
numTruePositives <- 0;

for( i in 1:nrow(myFrame))
{
	if( myFrame$isPositive[i] & myFrame$pAdjust[i] < 0.10  )
		bhUnder <- bhUnder + 1;
		
	if( myFrame$isPositive[i] )
		numTruePositives  = numTruePositives  +1
}	

bhUnder / numTruePositives
